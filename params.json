{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Utilities","google":"","body":"#AbstractFactory\r\n```php\r\n/**\r\n * namespace Vehicle;\r\n * use Utilities\\AbstractFactory;\r\n *\r\n * class Factory extends \\Utilities\\AbstractFactory {\r\n *\t\r\n * \t\tpublic static function __callStatic($factory, $parameters) {\r\n *\t\t\treturn parent::$factory($parameters);\r\n *\t\t}\r\n *\r\n *\t\tpublic static function register() {\r\n *\t\t\tparent::setNamespace(\"\\Vehicle\\Type\");\r\n *\t\t\tparent::addFactories(\"Car\", \"Truck\", \"Motorcycle\");\r\n *\t\t}\r\n * }\r\n */\r\n\r\n/**\r\n * namespace Vehicle\\Type;\r\n * \r\n * class Car extends \\Vehicle\\Motorized {\r\n *\r\n *     public function __construct($make, $model, $color) {\r\n *         $this->setMake($make);\r\n *         $this->setModel($model);\r\n *         $this->setColor($color);\r\n *     }\r\n * }\r\n */\r\n\r\nrequire_once($_SERVER['DOCUMENT_ROOT'].\"/path/to/Utilities/Loader.php\");\r\n\\Utilities\\Loader::register();\r\n\r\n\\Vehicle\\Factory::register();\r\n\r\n$car = \\Vehicle\\Factory::car(\"Ford\", \"Mustang\", \"red\");\r\n# $car is instance of \\Vehicle\\Type\\Car\r\n\r\necho $car->getColor(); // red [Method in \\Vehicle\\Motorized]\r\n```\r\n\r\n------------------------------------------------------------------------\r\n\r\n#Loader\r\n```php\r\nrequire_once($_SERVER['DOCUMENT_ROOT'].\"/path/to/Utilities/Loader.php\");\r\n\\Utilities\\Loader::register();\r\n\r\n# Get list of all loaded class files.\r\nforeach (\\Utilities\\Loader::log() as $filename) {\r\n\techo $filename.\"\\n\";\r\n}\r\n```\r\n\r\n------------------------------------------------------------------------\r\n\r\n#Juggernaut\r\n```php\r\nrequire_once($_SERVER['DOCUMENT_ROOT'].\"/path/to/Utilities/Loader.php\");\r\n\\Utilities\\Loader::register();\r\n\r\n$jugger = new Juggernaut();\r\n# Default iterations set to 100,000.\r\n\r\nfunction test_for_loop() {\r\n\tfor ($i = 0; $i < 1000; $i++) {\r\n\t\t// Do nothing.\r\n\t}\r\n}\r\n\r\n$jugger->iterate(\"test_for_loop\");\r\n\r\n# key := e63ded35237df6104212beb110810766 \r\n#     [ test := iterate          callback := test_for_loop    time := 4995.49ms ] @   100000 iterations\r\n# \r\n# /**\r\n#  *   5. function test_for_loop() {\r\n#  *   6. \tfor ($i = 0; $i < 1000; $i++) {\r\n#  *   7. \t\t// Do nothing.\r\n#  *   8. \t}\r\n#  *   9. }\r\n#  */\r\n\r\necho \"<pre>\".PHP_EOL;\r\necho $jugger->log();\r\necho \"</pre>\".PHP_EOL;\r\n\r\n# Or raw array...\r\nprint_t($jugger->log(true));\r\n\r\n# Array\r\n# (\r\n#     [e63ded35237df6104212beb110810766] => Array\r\n#         (\r\n#             [name] => test_for_loop\r\n#             [test] => iterate\r\n#             [time] => 4.9954919815063\r\n#             [trys] => 100000\r\n#         )\r\n# \r\n# )\r\n```\r\n\r\n------------------------------------------------------------------------","tagline":"PHP utility packages."}